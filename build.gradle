plugins {
    id 'org.springframework.boot' version '2.7.0'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'com.github.node-gradle.node' version '3.3.0'
}

group = 'yangfawu'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

node {
    // only include if system does not have node.js
//	version = '18.2.0'
//	download = true
//	workDir = file("${project.buildDir}/src/main/webapp/nodejs")
//	npmWorkDir = file("${project.buildDir}/src/main/webapp/npm")
    nodeProjectDir = file("$projectDir/src/main/webapp")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'commons-validator:commons-validator:1.7'
    implementation 'io.jsonwebtoken:jjwt:0.9.1'
    implementation 'com.google.guava:guava:31.1-jre'
    compileOnly 'org.projectlombok:lombok'
    compileOnly 'javax.xml.bind:jaxb-api'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
}

tasks.named('test') {
    useJUnitPlatform()
}

task npmInstallDependencies(type: NpmTask) {
    dependsOn 'npmSetup'
    execOverrides {
        it.ignoreExitValue = true
        it.workingDir = 'src/main/webapp'
    }
    args = ['install']
}

task npmBuild(type: NpmTask) {
    dependsOn 'npmInstallDependencies'
    execOverrides {
        it.workingDir = 'src/main/webapp'
    }
    args = ['run', 'build']
}

task copyAppToStaticBuild(type: Copy) {
    dependsOn 'npmBuild'
    from "$projectDir/src/main/webapp/build"
    into "$buildDir/resources/main/static"
}

task deleteStaticBuild(type: Delete) {
    delete "$buildDir/resources/main/static"
}

processResources {
    if ((project.findProperty('include-webapp') ?: false).toString() == 'true') {
        dependsOn 'copyAppToStaticBuild'
    } else {
        dependsOn 'deleteStaticBuild'
    }
}